rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user data
      allow read: if request.auth != null;

      // Users can only update their own profile, except for phase and isAdmin fields
      // which can only be updated by the user themselves (for phase) or admins
      allow update: if request.auth != null && (
        // User can update their own profile (non-sensitive fields)
        (request.auth.uid == userId &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin'])) ||
        // Admins can update anything
        isAdmin()
      );

      // Only allow user creation during signup (handled by Firebase Auth + Cloud Functions ideally)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Posts collection
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if request.auth != null;

      // Users can create their own posts
      allow create: if request.auth != null &&
                      request.resource.data.authorId == request.auth.uid;

      // Users can update/delete their own posts, or admins can do anything
      allow update, delete: if request.auth != null && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
    }
  }
}
